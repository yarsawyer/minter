use std::sync::Arc;

use anyhow::Context;
use tracing::debug;

use crate::{minter::Minter, subcommand::print_json};


#[derive(serde::Serialize, serde::Deserialize)]
pub struct Output {
    utxo: Vec<OutputUtxoData>,
}
#[derive(serde::Serialize, serde::Deserialize)]
pub struct OutputUtxoData {
    pub txid: String,
    pub vout: u32,
    pub confirmed: bool,
    pub value: f64,
}

#[derive(Debug, clap::Parser)]
pub struct ListUtxo {
    #[arg(help = "public wallet address to use (generated by receive)")]
    pub address: String,
}

impl ListUtxo {
    pub async fn run(self, options: crate::subcommand::Options, state: Arc<Minter>) -> anyhow::Result<()> {
        debug!("Retrieving utxo of address {}", self.address);
        let utxo = state.fetch_utxo(&options.wallet).await.context("Failed to fetch utxo's")?;
        print_json(Output {
            utxo: utxo
                .iter()
                .map(|(_addr,x)| OutputUtxoData {
                    txid: x.txid.clone(),
                    vout: x.vout,
                    confirmed: x.status.confirmed,
                    value: bitcoin::Amount::from_sat(x.value).to_btc(),
                })
                .collect(),
        }).unwrap();
        Ok(())
    }
}
